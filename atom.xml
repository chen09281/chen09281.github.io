<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金锦鲤X&#39;blog</title>
  
  <subtitle>记录生活美好，记录笔记</subtitle>
  <link href="http://myfake.xyz/atom.xml" rel="self"/>
  
  <link href="http://myfake.xyz/"/>
  <updated>2022-09-17T05:31:50.022Z</updated>
  <id>http://myfake.xyz/</id>
  
  <author>
    <name>金锦鲤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>员工管理系统：首页实现</title>
    <link href="http://myfake.xyz/posts/f1ca5d3c.html"/>
    <id>http://myfake.xyz/posts/f1ca5d3c.html</id>
    <published>2022-09-17T10:49:25.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跳转到首页"><a href="#跳转到首页" class="headerlink" title="跳转到首页"></a>跳转到首页</h2><blockquote><p>创建一个跳转到首页</p></blockquote><p>可以使用conroller或者config两种方法来操作</p><blockquote><p>使用controller的方法</p></blockquote><p>在controller包下创建一个IndexController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index.html&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们打开浏览器输入localhost:8080或localhost:8080&#x2F;index.html都应该可以成功跳转到主页。</p><blockquote><p>使用config</p></blockquote><p>在config包下创建一个MyMvcConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候输入链接应该可是可以跳转到主页的，但是有一个问题，就是并没有样式。</p><h2 id="解决没有样式的问题"><a href="#解决没有样式的问题" class="headerlink" title="解决没有样式的问题"></a>解决没有样式的问题</h2><p>打开所有的html页面，因为我们用的是thymeleaf模板引擎，所以要在html的标签里添加一一段<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code>以及根据thymeleaf官网的介绍，使用src链接部分需要使用<code>th:href=&quot;@&#123;&#125;&quot;</code>来添加,所以我们只需要把所有的html的css样式都添加上，就能解决没有样式的问题了,就像这样子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以及在配置文件中把thymeleaf的缓存给关掉,可以使用<code>spring.thymeleaf.cache=false</code>来关闭</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭模板引擎的缓存</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这时候我们重启项目重新打开应该就已经有样式了</p><p><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220917130150.png" alt="成功的"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;跳转到首页&quot;&gt;&lt;a href=&quot;#跳转到首页&quot; class=&quot;headerlink&quot; title=&quot;跳转到首页&quot;&gt;&lt;/a&gt;跳转到首页&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;创建一个跳转到首页&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以使用conroller或</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>员工管理系统：准备工作</title>
    <link href="http://myfake.xyz/posts/8b7bb590.html"/>
    <id>http://myfake.xyz/posts/8b7bb590.html</id>
    <published>2022-09-17T09:57:45.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>导入资源</p></blockquote><p><a href="https://codeload.github.com/chen09281/springboot-03-web/zip/refs/heads/main">点击下载资源</a></p><p>把里面的html放到templates目录下，其他的放在static目录下</p><p><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220917101700.png" alt="存放位置"></p><blockquote><p>导入lombok包</p></blockquote><p>这个包可以快速的帮我们搞定构造器和get，set，tostring的方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建虚拟数据</p></blockquote><p>创建<code>config</code>,<code>controller</code>,<code>dao</code>,<code>pojo</code>包</p><p><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220917103608.png" alt="工程的样子"></p><p>在<code>pojo</code>包下创建<code>Department</code>,<code>Employee</code>类</p><p>Department:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部门表</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Employee:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 员工表</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender; <span class="comment">// 0:女 1:男</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender, Department department)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.department = department;</span><br><span class="line">        <span class="comment">// 默认的创建日期</span></span><br><span class="line">        <span class="built_in">this</span>.birth = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>dao</code>包下创建<code>DepartmentDao</code>和<code>EmployeeDao</code>类</p><p>DepartmentDao:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部门表</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">// lombok的方法,创建所有的有参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">// lombok的方法，创建所有的无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeDao:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chen.pojo.Department;</span><br><span class="line"><span class="keyword">import</span> com.chen.pojo.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 员工dao</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟数据库中的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 员工有所属的部门</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DepartmentDao departmentDao;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,Employee&gt;(); <span class="comment">// 创建一个员工表</span></span><br><span class="line"></span><br><span class="line">        employees.put(<span class="number">1011</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1011</span>,<span class="string">&quot;Hooxi&quot;</span>,<span class="string">&quot;weifengchen198@gmail.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>,<span class="string">&quot;igl&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1012</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1012</span>,<span class="string">&quot;Niko&quot;</span>,<span class="string">&quot;weifengchen198@gmail.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">102</span>,<span class="string">&quot;突破手&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1013</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1013</span>,<span class="string">&quot;JKS&quot;</span>,<span class="string">&quot;weifengchen198@gmail.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">105</span>,<span class="string">&quot;突破手&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1014</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1014</span>,<span class="string">&quot;monsey&quot;</span>,<span class="string">&quot;weifengchen198@gmail.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">103</span>,<span class="string">&quot;狙击手&quot;</span>)));</span><br><span class="line">        employees.put(<span class="number">1015</span>,<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1015</span>,<span class="string">&quot;hunter&quot;</span>,<span class="string">&quot;weifengchen198@gmail.com&quot;</span>,<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">104</span>,<span class="string">&quot;自由人&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主键自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1016</span>;</span><br><span class="line">    <span class="comment">// 增加一个员工</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">            employee.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        employee.setDepartment(departmentDao.getDepartmentById(employee.getDepartment().getId()));</span><br><span class="line"></span><br><span class="line">        employees.put(employee.getId(),employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询全部员工信息</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id查询员工</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">getEmployeeById</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除员工通过id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的工程的准备工作就完成了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;导入资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codeload.github.com/chen09281/springboot-03-web/zip/refs/heads/main&quot;&gt;点击下载资源&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MVC配置原理</title>
    <link href="http://myfake.xyz/posts/8ea2cdb0.html"/>
    <id>http://myfake.xyz/posts/8ea2cdb0.html</id>
    <published>2022-09-16T08:59:50.000Z</published>
    <updated>2022-09-17T05:31:50.018Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官方说明</p></blockquote><p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><ul><li>Inclusion of and beans.<code>ContentNegotiatingViewResolver  BeanNameViewResolver</code></li><li>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#web.servlet.spring-mvc.static-content">later in this document</a>).</li><li>Automatic registration of , , and beans.<code>Converter  GenericConverter  Formatter</code></li><li>Support for (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#web.servlet.spring-mvc.message-converters">later in this document</a>).<code>HttpMessageConverters</code></li><li>Automatic registration of (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#web.servlet.spring-mvc.message-codes">later in this document</a>).<code>MessageCodesResolver</code></li><li>Static support.<code>index.html</code></li><li>Automatic use of a bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#web.servlet.spring-mvc.binding-initializer">later in this document</a>).<code>ConfigurableWebBindingInitializer</code></li></ul><p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring-framework/docs/5.3.22/reference/html/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own class of type but <strong>without</strong> .<code>@Configuration  WebMvcConfigurer  @EnableWebMvc</code></p><p>If you want to provide custom instances of , , or , and still keep the Spring Boot MVC customizations, you can declare a bean of type and use it to provide custom instances of those components.<code>RequestMappingHandlerMapping  RequestMappingHandlerAdapter  ExceptionHandlerExceptionResolver  WebMvcRegistrations</code></p><p>If you want to take complete control of Spring MVC, you can add your own annotated with , or alternatively add your own -annotated as described in the Javadoc of .<code>@Configuration  @EnableWebMvc  @Configuration  DelegatingWebMvcConfiguration  @EnableWebMvc</code></p><blockquote><p>翻译(用的机翻可能不太准确)</p></blockquote><p>Spring Boot 为 Spring MVC 提供了自动配置，适用于大多数应用程序。</p><p>自动配置在 Spring 的默认值之上添加了以下特性：</p><p>包含和 beans.<code>ContentNegotiatingViewResolver  BeanNameViewResolver</code></p><p>支持提供静态资源，包括对 WebJars 的支持（本文档后面会介绍）。</p><p>自动注册 , 和 beans.<code>Converter  GenericConver  terFormatter</code></p><p>支持（本文档稍后介绍）.<code>HttpMessageConverters</code></p><p>自动注册（本文档稍后介绍）.<code>MessageCodesResolver</code></p><p>静态 support.index.html</p><p>自动使用 bean（本文档后面会介绍）.<code>ConfigurableWebBindingInitializer</code></p><p>如果您想保留那些 Spring Boot MVC 自定义并进行更多 MVC 自定义（拦截器、格式化程序、视图控制器和其他功能），您可以添加自己的类型类但没有 .<code>@Configuration  WebMvcConfigurer  @EnableWebMvc</code></p><p>如果您想提供 、 或 的自定义实例，并且仍然保留 Spring Boot MVC 自定义项，则可以声明一个类型的 bean 并使用它来提供这些组件的自定义实例。<code>RequestMappingHandlerMapping  RequestMappingHandlerAdapter  ExceptionHandlerExceptionResolver  WebMvcRegistrations</code></p><p>如果您想完全控制 Spring MVC，您可以添加自己的注释，或者添加自己的 -annotated，如 .<code>@Configuration  @EnableWebMvc  @Configuration  DelegatingWebMvcConfiguration  @EnableWebMvc</code> 的 Javadoc 中所述</p><blockquote><p>配置mvc扩展组件</p></blockquote><p>所以我们可以创建一个config包，里面存放你想放的拓展组件，比如我这里创建一个<code>MyMvcConfig</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想div一些定制化的功能，只需要写这个组件然后将他交给springboot，springboot就会帮我们自动装配了</span></span><br><span class="line"><span class="comment">// 扩展springmvc dispatch servlet</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>往配置文件里面加组件</p></blockquote><p>首先查看文档上说的<code>ContentNegotiatingViewResolver</code>是支持的视图解析器</p><p>打开<code>ContentNegotiatingViewResolver  </code>的源码可以看到他实现了视图解析器的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentNegotiatingViewResolver</span> <span class="keyword">extends</span> <span class="title class_">WebApplicationObjectSupport</span> <span class="keyword">implements</span> <span class="title class_">ViewResolver</span>, Ordered, InitializingBean &#123;</span><br><span class="line"><span class="comment">// ***</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们点进<code>ViewResolver</code>里面只有一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ViewResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    View <span class="title function_">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以回去搜索以下<code>resolveViewName</code>看看他是怎么重写这个代码的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> View <span class="title function_">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">attrs</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">&quot;No current ServletRequestAttributes&quot;</span>);</span><br><span class="line">    List&lt;MediaType&gt; requestedMediaTypes = <span class="built_in">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());</span><br><span class="line">    <span class="keyword">if</span> (requestedMediaTypes != <span class="literal">null</span>) &#123; <span class="comment">// 如果requestedMediaTypes不为空</span></span><br><span class="line">        List&lt;View&gt; candidateViews = <span class="built_in">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes); <span class="comment">// 获取候选的视图</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">bestView</span> <span class="operator">=</span> <span class="built_in">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs); <span class="comment">// 得到最好的视图</span></span><br><span class="line">        <span class="keyword">if</span> (bestView != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bestView;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们点击<code>getCandidateViews</code>查看怎么获取到候选的视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;View&gt; <span class="title function_">getCandidateViews</span><span class="params">(String viewName, Locale locale, List&lt;MediaType&gt; requestedMediaTypes)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    List&lt;View&gt; candidateViews = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.viewResolvers != <span class="literal">null</span>) &#123;</span><br><span class="line">        Assert.state(<span class="built_in">this</span>.contentNegotiationManager != <span class="literal">null</span>, <span class="string">&quot;No ContentNegotiationManager set&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.viewResolvers.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">            <span class="type">ViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> (ViewResolver)var5.next();</span><br><span class="line">            <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">            <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</span><br><span class="line">                candidateViews.add(view);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> requestedMediaTypes.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">                <span class="type">MediaType</span> <span class="variable">requestedMediaType</span> <span class="operator">=</span> (MediaType)var8.next();</span><br><span class="line">                List&lt;String&gt; extensions = <span class="built_in">this</span>.contentNegotiationManager.resolveFileExtensions(requestedMediaType);</span><br><span class="line">                <span class="type">Iterator</span> <span class="variable">var11</span> <span class="operator">=</span> extensions.iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var11.hasNext()) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> (String)var11.next();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">viewNameWithExtension</span> <span class="operator">=</span> viewName + <span class="string">&#x27;.&#x27;</span> + extension;</span><br><span class="line">                    view = viewResolver.resolveViewName(viewNameWithExtension, locale);</span><br><span class="line">                    <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</span><br><span class="line">                        candidateViews.add(view);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="built_in">this</span>.defaultViews)) &#123;</span><br><span class="line">        candidateViews.addAll(<span class="built_in">this</span>.defaultViews);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> candidateViews;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写拓展类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想div一些定制化的功能，只需要写这个组件然后将他交给springboot，springboot就会帮我们自动装配了</span></span><br><span class="line"><span class="comment">// 扩展springmvc dispatch servlet</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ViewResolver 实现了视图解析器接口的类，我们就可以把他看作视图解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">myViewResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyViewResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义了一个自己的视图解析器MyViewResolver</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyViewResolver</span> <span class="keyword">implements</span> <span class="title class_">ViewResolver</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> View <span class="title function_">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>所有的请求都会经过DispatcherServlet类，然后会经过doDispatch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">        <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    processedRequest = <span class="built_in">this</span>.checkMultipart(request);</span><br><span class="line">                    multipartRequestParsed = processedRequest != request;</span><br><span class="line">                    mappedHandler = <span class="built_in">this</span>.getHandler(processedRequest);</span><br><span class="line">                    <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.noHandlerFound(processedRequest, response);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">                    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> HttpMethod.GET.matches(method);</span><br><span class="line">                    <span class="keyword">if</span> (isGet || HttpMethod.HEAD.matches(method)) &#123;</span><br><span class="line">                        <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                        <span class="keyword">if</span> ((<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                    <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">this</span>.applyDefaultViewName(processedRequest, mv);</span><br><span class="line">                    mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var20) &#123;</span><br><span class="line">                    dispatchException = var20;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var21) &#123;</span><br><span class="line">                    dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, var21);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">                <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, var22);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var23) &#123;</span><br><span class="line">                <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, var23));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                <span class="built_in">this</span>.cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以在这个地方打一个断点来debug,debug启动后打开浏览器输入<code>localhost:8080</code>这时候会进断点了我们打开this找到viewResolvers，展开可以看到我们的自定义视图解析器已经存在里面了</p><p><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220916115134.png" alt="dubug"></p><blockquote><p>拓展mvc需要注意的点</p></blockquote><p>官方文档里面有一段话:</p><p>If you want to keep those Spring Boot MVC customizations and make more MVC customizations (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type WebMvcConfigurer but without <code>@EnableWebMvc</code>.</p><p>翻译过来的意思大概是:</p><p>如果您想保留那些 Spring Boot MVC 自定义并进行更多 MVC 自定义（拦截器、格式化程序、视图控制器和其他功能），您可以添加自己的 WebMvcConfigurer 类型的 <code>@Configuration</code> 类，但不添加 <code>@EnableWebMvc</code>。</p><p>上面说了可以添加@Configuration但是不能添加<code>@EnableWebMvc</code>,这是为什么呢？点开<code>@EnableWebMvc</code>的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现里面import了一个类<code>DelegatingWebMvcConfiguration</code>点进发现他继承了<code>WebMvcConfigurationSupport</code>这个类，记住这个类后面要考的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候再打开<code>WebMvcAutoConfiguration</code>里面就知道了:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass(&#123;Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(-2147483638)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到里面有一个注释<code>@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</code>这个注释在之前自动配置原理再理解这篇文章里面讲过<code>@ConditionalOnMissingBean</code>的意思是<strong>容器中不存在指定Bean</strong>才会生效,这就解释了为什么springboot官方叫我们不能添加<code>@EnableWebMvc</code>因为导入的<code>DelegatingWebMvcConfiguration</code>类继承了<code>WebMvcConfigurationSupport</code>所以他就会存在这个bean从而导致整个<code>WebMvcAutoConfiguration</code>失效。</p><p>至于<code>@EnableWebMvc</code>这个注解其实这玩意就是导入了一个类：<code>DelegatingWebMvcConfiguration</code>: 从容器中获取所有的<code>webmvcconfig</code>;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;官方说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spring Boot provides auto-configuration for Spring MVC that works well with most applications.&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>thymeleaf语法</title>
    <link href="http://myfake.xyz/posts/32e393fa.html"/>
    <id>http://myfake.xyz/posts/32e393fa.html</id>
    <published>2022-09-15T22:58:30.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>thymeleaf的官方文档</p></blockquote><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.pdf">thymeleaf官方文档</a>在这里可以看到关于themeleaf的所有使用说明在第10章Attribute里可以看到一些关于他的使用语法。</p><blockquote><p>thymeleaf的用法</p></blockquote><p>thymeleaf其实和vue差不多都是xx:xxxx比如我这里创建一个test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--所有的html元素都可以被thymeleaf替换接管 th:元素名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[$&#123;user&#125;]]<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;h3 th:each=&quot;user:$&#123;users&#125;&quot; th:text=&quot;$&#123;user&#125;&quot;&gt;&lt;/h3&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>controller下创建一个IndexController类，我这里放的是下面的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在templates目录下的所有页面，只能通过controller来跳转</span></span><br><span class="line"><span class="comment">// 这个需要模板引擎的知识！ thymeleaf</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,Springboot&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>, Arrays.asList(<span class="string">&quot;chen&quot;</span>,<span class="string">&quot;wei&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候打开浏览器输入<code>localhost:8080/test</code>就会看到所传入的内容都被打印出来了<br><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220916074405.png" alt="成功"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;thymeleaf的官方文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.pdf&quot;&gt;thymeleaf官方文档&lt;/</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>thymeleaf模板引擎</title>
    <link href="http://myfake.xyz/posts/c96c8ccf.html"/>
    <id>http://myfake.xyz/posts/c96c8ccf.html</id>
    <published>2022-09-15T16:03:22.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>模板引擎</p></blockquote><p>前端交给我们的页面，是html页面。SpringBoot项目首先是以jar的方式，不是war而且我们使用的tomecat是嵌入式的，他现在默认是不支持jsp的。</p><p>其实jsp就是一个模板引擎，springboot推荐我们使用的是thymeleaf。</p><p>如果要使用thymeleaf需要去官网查看对应要导入的包，我这里复制出一段就可以使用了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>版本号我们不需要输入，它默认会选取对应spingboot版本的包。</p><blockquote><p>使用thymeleaf</p></blockquote><p>首先我们创建一个叫IndexController的类,以便测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在templates目录下的所有页面，只能通过controller来跳转</span></span><br><span class="line"><span class="comment">// 这个需要模板引擎的知识！ thymeleaf</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,Springboot&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后在templates创建一个test.html，之前在首页那篇文章里面说过，templates文件夹内的需要通过访问才可以读取。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--所有的html元素都可以被thymeleaf替换接管 th:元素名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要更改的地方有<code>&lt;html&gt;</code>往里面添加了<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code>这行代码</p><p>使用方法就是在普通的html元素添加th属性。</p><p>打开浏览器输入<code>localhost:8080/test</code>成功的话会有以下界面</p><p><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220915204714.png" alt="成功"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;模板引擎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前端交给我们的页面，是html页面。SpringBoot项目首先是以jar的方式，不是war而且我们使用的tomecat是嵌入式的，他现在默认是不支持jsp的。&lt;/p&gt;
&lt;p&gt;其实jsp就是一个模</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>首页定制</title>
    <link href="http://myfake.xyz/posts/e3de066.html"/>
    <id>http://myfake.xyz/posts/e3de066.html</id>
    <published>2022-09-15T14:37:27.000Z</published>
    <updated>2022-09-17T05:31:50.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如何自定义首页</p></blockquote><p>在<code>WebMvcAutoConfiguration</code>源码里面有这几段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Resource <span class="title function_">getWelcomePage</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] var1 = <span class="built_in">this</span>.resourceProperties.getStaticLocations();</span><br><span class="line">    <span class="type">int</span> <span class="variable">var2</span> <span class="operator">=</span> var1.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="number">0</span>; var3 &lt; var2; ++var3) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> var1[var3];</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">indexHtml</span> <span class="operator">=</span> <span class="built_in">this</span>.getIndexHtml(location);</span><br><span class="line">        <span class="keyword">if</span> (indexHtml != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> indexHtml;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    <span class="keyword">if</span> (servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getIndexHtml((Resource)(<span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(servletContext, <span class="string">&quot;/&quot;</span>)));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Resource <span class="title function_">getIndexHtml</span><span class="params">(String location)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getIndexHtml(<span class="built_in">this</span>.resourceLoader.getResource(location));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Resource <span class="title function_">getIndexHtml</span><span class="params">(Resource location)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> location.createRelative(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (resource.exists() &amp;&amp; resource.getURL() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> resource;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们可以看到，需要在静态资源目录下读取index.html文件所以我们可以直接在public或者static目录下创建一个index.html，在templates目录下的文件只能通过controller来访问,例如我这里创建了一个:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>里面只有一行一级标题，这时候我们启动项目在浏览器直接访问就可以进到首页了。</p><p><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220915155918.png" alt="测试结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如何自定义首页&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;code&gt;WebMvcAutoConfiguration&lt;/code&gt;源码里面有这几段代码:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>静态资源的导入</title>
    <link href="http://myfake.xyz/posts/2bb2271c.html"/>
    <id>http://myfake.xyz/posts/2bb2271c.html</id>
    <published>2022-09-14T19:53:05.000Z</published>
    <updated>2022-09-17T05:31:50.026Z</updated>
    
    <content type="html"><![CDATA[<p>这是WebMcvAutoConfiguration里面的一段代码，这段代码就是默认可以存放静态资源的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">            registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ServletContextResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(<span class="built_in">this</span>.servletContext, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">                registration.addResourceLocations(<span class="keyword">new</span> <span class="title class_">Resource</span>[]&#123;resource&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击getStaicLocaions()里面可以找到有以下这几行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] getStaticLocations() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.staticLocations;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Resources</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line">    <span class="built_in">this</span>.addMappings = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">this</span>.customized = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.chain = <span class="keyword">new</span> <span class="title class_">Chain</span>();</span><br><span class="line">    <span class="built_in">this</span>.cache = <span class="keyword">new</span> <span class="title class_">Cache</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>可以看到在<code>CLASSPATH_RESOURCE_LOCATIONS</code>里面有几个路径，这就是我们可以存放springboot静态资源的地方,还有一种方法是webjars。</p><blockquote><p>webjars</p></blockquote><p>这是一种导包方式来进行导入可以打开webjars的官网来查看maven的配置,例如我这里导入一个jquery的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入完成后他的项目路径如下:</p><p><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220914232604.png" alt="jquery的目录"></p><p>可以看到实际上还是js文件，测试是否导入成功我们可以启动项目如果是使用webjars的话，在地址栏输入 <code>ocalhost:8080/webjars/jquery/3.4.1/jquery.js</code>就可以看到我们的包已经导入成功了</p><p><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220914232928.png" alt="jquery.js"></p><p>,如果不是使用的webjars而是使用的默认路径，就是下面这种地址。</p><blockquote><p>通过默认路径</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>通过这行代码可以看到有几个目录路径，这就是我们的静态资源的目录了，当然也可以自己配置，这几个路径的优先等级是从左往右，越前面的优先级越高，我们创建完项目可以看到，是没有public和resource这两个文件夹的，但是不重要我们可以创建，以下是我放了一张图片这张图片名为<code>1.jpg</code>在public测试导入的场景,在浏览器地址栏直接<code>localhost:8080/1.jpg</code>就可以直接访问了</p><p><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220914233416.png" alt="1.jpg"></p><blockquote><p>自定义路径<br>注意点:如果使用自定义路径的话springboot的默认路径就会失效</p></blockquote><p>使用自定义路径我们可以在配置文件中添加<code>spring.web.resources.static-locations</code>来配置,例如我们这里配置一个resource下的chen目录</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/chen/</span></span><br></pre></td></tr></table></figure><p>如果还要更改访问路径可以使用<code>spring.mvc.sttatic-path-patern</code>来修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/chen/</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/chen/**</span></span><br></pre></td></tr></table></figure><p><img src="https://hexo-1303188987.cos.ap-guangzhou.myqcloud.com/test/20220914234339.png" alt="修改路径后的"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是WebMcvAutoConfiguration里面的一段代码，这段代码就是默认可以存放静态资源的地方&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>springbootweb开发要解决的问题</title>
    <link href="http://myfake.xyz/posts/de7fafd.html"/>
    <id>http://myfake.xyz/posts/de7fafd.html</id>
    <published>2022-09-14T19:45:20.000Z</published>
    <updated>2022-09-17T05:31:50.018Z</updated>
    
    <content type="html"><![CDATA[<ol><li>导入静态资源</li><li>首页</li><li>jsp，模板引擎Thymeleaf</li><li>增删改查</li><li>拦截器</li><li>国际化</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;导入静态资源&lt;/li&gt;
&lt;li&gt;首页&lt;/li&gt;
&lt;li&gt;jsp，模板引擎Thymeleaf&lt;/li&gt;
&lt;li&gt;增删改查&lt;/li&gt;
&lt;li&gt;拦截器&lt;/li&gt;
&lt;li&gt;国际化&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>自动配置原理再理解</title>
    <link href="http://myfake.xyz/posts/9fefd7bd.html"/>
    <id>http://myfake.xyz/posts/9fefd7bd.html</id>
    <published>2022-09-14T10:30:50.000Z</published>
    <updated>2022-09-17T05:31:50.026Z</updated>
    
    <content type="html"><![CDATA[<p>先看httpencodingautoconfiguration这个文件内的注解,基本上所有的自动配置文件都差不多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动配置属性 : HttpProperties</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpProperties.class)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Spring的底层注解： 根据不同的条件，来判断当前配置或者类是否生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;,value = &quot;enabled&quot;,matchIfMissing = true)</span></span><br></pre></td></tr></table></figure><p>配置文件可以联系到spring.factroies这个文件的配置，例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">mvc:</span></span><br><span class="line"><span class="attr">date-format:</span> </span><br></pre></td></tr></table></figure><blockquote><p>@Conditional</p></blockquote><p><strong>自动配置类必须在一定条件下才能生效：@Conditional派生注解 (Spring注解版原生的@Conditional作用)</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才会生效:</p><table><thead><tr><th>**@Conditional扩展注解 **</th><th><strong>作用(判断是否满足当前指定条件)</strong></th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的Java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnPropertry</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><blockquote><p>总结:</p></blockquote><p><strong>根据挡墙不同的条件判断，决定这个配置类是否生效</strong></p><p>一旦这个配置类生效;这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p><p><strong>自动装配原理的精髓:</strong></p><ol><li><p><strong>SpringBoot启动会加载大量的自动配置类</strong></p></li><li><p><strong>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中</strong></p></li><li><p><strong>我们再来看这个自动配置类中到底配置了哪些组件(子要我们要用的组件存在其中，我们就不需要再动手了)</strong></p></li><li><p><strong>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可</strong></p><p><strong>xxxAutoConfiguration: 自动配置类；</strong>给容器中添加组件</p><p><strong>xxxPrtoperties:封装配置文件中相关属性</strong></p></li></ol><p>可以通过修改application.yml的debug&#x3D;true来查看哪些自动配置类生效，那些没有</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先看httpencodingautoconfiguration这个文件内的注解,基本上所有的自动配置文件都差不多&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>多环境配置以及配置文件位置</title>
    <link href="http://myfake.xyz/posts/f470d5d5.html"/>
    <id>http://myfake.xyz/posts/f470d5d5.html</id>
    <published>2022-09-13T21:25:08.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>application.yml可以存放的位置以及优先级(按照优先级排名)</p></blockquote><ol><li>file:.&#x2F;config&#x2F;</li><li>file:.&#x2F;</li><li>classpath:&#x2F;config&#x2F;</li><li>classpath:&#x2F;</li></ol><blockquote><p>多环境配置</p></blockquote><p>在实际的开发过程中肯定会有多种环境的测试，例如数据库的账号配置或者是端口配置可以使用spring.profiles.active&#x3D;xxx来配置所要激活的环境，例如有test和dev环境,首先创建</p><blockquote><p>使用properties的方法</p></blockquote><p><code>application.properties</code>和<code>application-test.properties</code>和</p><p><code>application-dev.properties</code>这两个环境不同之处在于端口:</p><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SpringBoot的多环境配置： 可以选择激活哪一个配置文件</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">test</span></span><br></pre></td></tr></table></figure><p>application-test.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure><p>application-dev.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8082</span></span><br></pre></td></tr></table></figure><p>如果像我这样写启动项目的端口就会是8081如果是dev就是8082</p><blockquote><p>使用yml配置(推荐)</p></blockquote><p>如果使用yml配置就不用像properties创建多个文件就只需要一个文件即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;application.yml可以存放的位置以及优先级(按照优先级排名)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;file:.&amp;#x2F;config&amp;#x2F;&lt;/li&gt;
&lt;li&gt;file:.&amp;#x2F;&lt;/li&gt;
&lt;li&gt;clas</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JSR303校验</title>
    <link href="http://myfake.xyz/posts/a5fe0d25.html"/>
    <id>http://myfake.xyz/posts/a5fe0d25.html</id>
    <published>2022-09-13T17:49:39.000Z</published>
    <updated>2022-09-17T05:31:50.018Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JSR303</p></blockquote><p>可以用于校验数据是否符合规范</p><p>例如定义一个email对象可以添加@Email来约束必须为email格式，不然就会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">// 校验数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Integer age, Boolean happy, Date birth, Map&lt;String, Object&gt; maps, List&lt;Object&gt; lists, Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getHappy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> happy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHappy</span><span class="params">(Boolean happy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirth</span><span class="params">(Date birth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getMaps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getLists</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLists</span><span class="params">(List&lt;Object&gt; lists)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, happy=&quot;</span> + happy +</span><br><span class="line">                <span class="string">&quot;, birth=&quot;</span> + birth +</span><br><span class="line">                <span class="string">&quot;, maps=&quot;</span> + maps +</span><br><span class="line">                <span class="string">&quot;, lists=&quot;</span> + lists +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/a5fe0d25/image-20220913181545419.png" alt="包中的注解"></p><p>以上就是可以使用的约束。</p><p><img src="https://img-blog.csdnimg.cn/20200525161753312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQ0MDY0Mg==,size_16,color_FFFFFF,t_70" alt="常用约束"></p><p><img src="https://img-blog.csdnimg.cn/20200525161900254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQ0MDY0Mg==,size_16,color_FFFFFF,t_70" alt="常用约束"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;JSR303&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以用于校验数据是否符合规范&lt;/p&gt;
&lt;p&gt;例如定义一个email对象可以添加@Email来约束必须为email格式，不然就会报错&lt;/p&gt;
&lt;figure class=&quot;highlight j</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>springboot配置</title>
    <link href="http://myfake.xyz/posts/fa505287.html"/>
    <id>http://myfake.xyz/posts/fa505287.html</id>
    <published>2022-09-13T14:44:57.000Z</published>
    <updated>2022-09-17T05:31:50.018Z</updated>
    
    <content type="html"><![CDATA[<p>yaml可以直接给实体类赋值</p><p>首先创建一个pojo包里面创建两个测试类，我这里创建的是person和dog类</p><p>person:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @ConfigurationProperties作用:</span></span><br><span class="line"><span class="comment">* 将配置文件中配置的每一个属性的值，映射到这个组件中;高数SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定，参数prefix = &quot;person&quot;;将配置文件中的person下面的所有属性一一对应</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 只有这个组件是容器中的组件，才能使用容器所提供的@ConfigurationProperties功能</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Integer age, Boolean happy, Date birth, Map&lt;String, Object&gt; maps, List&lt;Object&gt; lists, Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getHappy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> happy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHappy</span><span class="params">(Boolean happy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirth</span><span class="params">(Date birth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getMaps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getLists</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLists</span><span class="params">(List&lt;Object&gt; lists)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, happy=&quot;</span> + happy +</span><br><span class="line">                <span class="string">&quot;, birth=&quot;</span> + birth +</span><br><span class="line">                <span class="string">&quot;, maps=&quot;</span> + maps +</span><br><span class="line">                <span class="string">&quot;, lists=&quot;</span> + lists +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dog:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;旺财&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;3&quot;)</span></span><br><span class="line">    <span class="keyword">private</span>  Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用application.yml给person赋值</p><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">chen</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2022</span><span class="string">/9/13</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span> [<span class="string">code</span>,<span class="string">music</span>,<span class="string">girl</span>]</span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>可以通过<code>ConfigurationProperties()</code>来读取yml里面的person内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br></pre></td></tr></table></figure><p>添加这个注释的时候会报红，点击Open documentation可以在官网获得解决的方法，亦可导入这个包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/posts/fa505287/image-20220913160545328-16630563474011.png" alt="测试"></p><p>导入完成后在test文件夹内测试是否读取成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.springboot02config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chen.springboot02config.pojo.Dog;</span><br><span class="line"><span class="keyword">import</span> com.chen.springboot02config.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot02ConfigApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/fa505287/image-20220913162049858.png" alt="导入成功"></p><p>运行后可以看到已经注入成功了</p><p>使用@ConfigurationProperties和@Value的区别</p><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定(松散语法)</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><ul><li><code>ConfigurationProperties</code>只需要写一次即可，<code>value</code>则需要每个字段都添加</li><li>松散绑定：比如我的yml中写的last-name，这个和lastName是一样的，-后面跟着的字母默认就是大写的。这就是松散绑定</li><li>JSE303数据校验，这个就是我们可以在字段是增加一层过滤器验证，可以保证数据的合法性</li><li>复杂类型封装，yml中可以封装对象，使用@value就不支持</li></ul><p><strong>结论</strong></p><ul><li>配置yml和配置properties都可以获取到值，推荐使用yml</li><li>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下@Value</li><li>如果是，我们专门编写了一个JavaBean来和配置文件进行映射，就直接使用@ConfigurationProperties，不需要犹豫！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;yaml可以直接给实体类赋值&lt;/p&gt;
&lt;p&gt;首先创建一个pojo包里面创建两个测试类，我这里创建的是person和dog类&lt;/p&gt;
&lt;p&gt;person:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>yml语法</title>
    <link href="http://myfake.xyz/posts/e8729409.html"/>
    <id>http://myfake.xyz/posts/e8729409.html</id>
    <published>2022-09-13T14:09:06.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>配置文件</p></blockquote><p>SpringBoot使用一个全局的配置文件，配置文件名称是固定的</p><ul><li>application.properties<ul><li>语法结构: key&#x3D;value</li></ul></li><li>application.yml<ul><li>语法结构: key: 空格 value</li></ul></li></ul><p><strong>配置文件的作用</strong>:修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p><blockquote><p>YAML</p></blockquote><p>YAML是”YAML Ain’t a Markup Language”（YAML不是一种置标语言）的递归缩写。</p><h3 id="标记语言"><a href="#标记语言" class="headerlink" title="标记语言"></a>标记语言</h3><p>一起拿的配置文件，大多数都是使用xml来配置；比如端口配置，这是yaml和xml的区别:</p><p>yaml配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">0000</span></span><br></pre></td></tr></table></figure><p>xml配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;配置文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SpringBoot使用一个全局的配置文件，配置文件名称是固定的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;application.properties&lt;ul&gt;
&lt;li&gt;语法结构: key&amp;#x3D;value&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>主启动类是怎么运行的</title>
    <link href="http://myfake.xyz/posts/6e8da807.html"/>
    <id>http://myfake.xyz/posts/6e8da807.html</id>
    <published>2022-09-12T21:44:56.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SpringApplication</p></blockquote><p>这个类主要做了以下四件事情</p><ol><li>推断应用的类型是普通的项目还是web项目</li><li>查找并加载所有可用初始化器，设置到initializers属性中</li><li>找出所有的应用程序监听器，设置到listeners属性中</li><li>推断并设置main方法的定义类，找到运行的主类</li></ol><p>SpringBoot自动装配的核心就是<code>JavaConfig</code> <code>@Configuraion</code> <code>@Bean</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;SpringApplication&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个类主要做了以下四件事情&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;推断应用的类型是普通的项目还是web项目&lt;/li&gt;
&lt;li&gt;查找并加载所有可用初始化器，设置到initializer</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>springboot自动装配原理</title>
    <link href="http://myfake.xyz/posts/d4aa8d83.html"/>
    <id>http://myfake.xyz/posts/d4aa8d83.html</id>
    <published>2022-09-12T15:11:37.000Z</published>
    <updated>2022-09-17T05:31:50.018Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自动配置:</p></blockquote><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><ul><li>spring-boot-dependencies: 核心依赖在父工程中</li><li>我们在写或者引入一些SpringBoot依赖的时候，不需要指定版本，因为有这些版本的仓库</li></ul><h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动器：说白了就是springboot的启动场景</li><li>比如spring-boot-starter-web，他就会帮我们自动导入web环境所有的依赖</li><li>springboot会将所有功能场景，都变成一个个的启动器</li><li>我们要使用什么功能就只需要找到对应的启动器就可以了 <code>start</code></li></ul><h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @SpringBootApplication: 标注这个类是一个springboot的应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot01HelloworldApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 将springboot应用启动</span></span><br><span class="line">        SpringApplication.run(Springboot01HelloworldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注解</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span>: SpringBoot的配置</span><br><span class="line"><span class="meta">@Configuration</span>: spring配置类</span><br><span class="line"><span class="meta">@Component</span>: 说明这也是一个spring的组件</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>: 自动配置</span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span>: 自动配置包</span><br><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.clss)</span>: 自动配置`包注册`</span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.clss)</span>: 自动配置导入选择</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有的配置</span></span><br><span class="line">List&lt;String&gt; configurations = <span class="built_in">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">获取候选的配置</span><br><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">        List&lt;String&gt; configurations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(SpringFactoriesLoader.loadFactoryNames(<span class="built_in">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="built_in">this</span>.getBeanClassLoader()));</span><br><span class="line">        ImportCandidates.load(AutoConfiguration.class, <span class="built_in">this</span>.getBeanClassLoader()).forEach(configurations::add);</span><br><span class="line">        Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  META-INF&#x2F;spring.factories: 自动配置的核心文件</p><p>  <img src="/posts/d4aa8d83/image-20220912181708078-16629778321441-16629778379903.png" alt="文件位置"></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">所有资源加载到配置类中</span><br></pre></td></tr></table></figure><p>  <img src="/posts/d4aa8d83/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE.png" alt="自动配置"></p><p>  结论:springboot所有的自动配置都是启动的时候扫描并加载:<code>spring.factories</code>所有的自动配置类都在这里，但是不一定生效，要判断条件是否成立，只要导入了对应的start，就有对应的启动器了，有了启动器自动装配就会生效，然后就配置成功！</p><ol><li>springboot在启动的时候，从类路径下&#x2F;META-INF&#x2F;spring.factories获取指定的值；</li><li>将这些自动配置的类导入容器，自动配置类就会生效，帮我们进行自动配置</li><li>以前我们需要手动配置的东西，现在springboot帮我们做了</li><li>整个javaEE，解决方案和自动配置的东西都在spring-boot-autoconfigure下</li><li>他会把所有需要导入的组件，以类名的方式返回，这些组件就会被添加到容器</li><li>容器中也会存在非常多的xxx.autoconfiguration的文件，就是这些类给容器导入了这个场景需要的所有组件，并自动配置，@Configuration,JavaConfig!</li><li>有了自动配置类，免去了我们手动编写配置文件的工作</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;自动配置:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;pom-xml&quot;&gt;&lt;a href=&quot;#pom-xml&quot; class=&quot;headerlink&quot; title=&quot;pom.xml&quot;&gt;&lt;/a&gt;pom.xml&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;spri</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第一个SpringBoot程序</title>
    <link href="http://myfake.xyz/posts/6d7bc0fa.html"/>
    <id>http://myfake.xyz/posts/6d7bc0fa.html</id>
    <published>2022-09-12T00:20:00.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>环境</p></blockquote><ul><li>jdk17</li><li>maven</li><li>springboot:最新版</li><li>idea</li></ul><blockquote><p>创建</p></blockquote><p>官方提供了一个快速生成的网站！IDEA集成了这个网站。</p><ul><li>可以在官网直接下载后，导入idea开发</li><li>可以使用idea创建一个springboot项目(一般开发直接在IDEA中创建)</li></ul><h3 id="官网创建："><a href="#官网创建：" class="headerlink" title="官网创建："></a>官网创建：</h3><p><img src="/posts/6d7bc0fa/image-20220912002723028.png" alt="使用官网创建spring boot项目"></p><p>点击ADD DEPENDENCIES…搜索web后勾选，就导入了web包了。</p><p>点击GNERATE之后会下载一个压缩包，里面就是你的工程了。</p><p><img src="/posts/6d7bc0fa/%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6.png" alt="导入工程后"></p><p>打开后和普通的工程文件一样,运行com.xxx.xxx.xxxApplication即可运行成功，在com.xxx.xxx包下创建controller包，创建HelloWorld类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.helloworld.contrller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动装配</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口：http://localhost:8080/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 调用业务，接收前端的参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接运行xxxApplication在浏览器中输入localhost:8080&#x2F;hello即可成功访问</p><p><img src="/posts/6d7bc0fa/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A2%84%E8%A7%88.png" alt="浏览器"></p><h3 id="使用IDEA创建"><a href="#使用IDEA创建" class="headerlink" title="使用IDEA创建"></a>使用IDEA创建</h3><p>在idea中新建项目，选择Spring initializr</p><p><img src="/posts/6d7bc0fa/idea.png" alt="idea"></p><blockquote><p>小彩蛋</p></blockquote><p>更改端口：</p><p>在resources下的application配置server.port&#x3D;端口号</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改项目的端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure><p>自定义启动banner</p><p>在resources下新建一个名为banner的txt文件如果banner.txt图标隔壁有个圈就证明已经关联起来了。</p><p><img src="/posts/6d7bc0fa/banner%E6%96%87%E6%9C%AC.png" alt="成功的图标"></p><p>这时候我们运行就已经成功了</p><p><img src="/posts/6d7bc0fa/banner.png" alt="启动"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;jdk17&lt;/li&gt;
&lt;li&gt;maven&lt;/li&gt;
&lt;li&gt;springboot:最新版&lt;/li&gt;
&lt;li&gt;idea&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;创建&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>初识springboot</title>
    <link href="http://myfake.xyz/posts/22044772.html"/>
    <id>http://myfake.xyz/posts/22044772.html</id>
    <published>2022-09-11T21:07:47.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 什么是spring</p></blockquote><p>Spring是一个开源框架，2003年兴起的一个轻量级Java开发框架，作者: Rod Johnson。</p><p><strong>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发</strong></p><blockquote><p>Spring是如何简化开发的</p></blockquote><p>为了降低Java开发的复杂性，Spring采用了以下4中关键策略:</p><ol><li>基于POJO的轻量级和最小入侵性编程；</li><li>通过IOC，依赖注入(DI)和面向接口实现松耦合；</li><li>基于切面(AOP)和惯例进行声明式编程；</li><li>通过切面模板减少样式代码；</li></ol><blockquote><p>什么是Spring Boot</p></blockquote><p>最开始我们接触JavaWeb开发一个web应用，使用的是Servlet+Tomcat，servlet要经历很多的步骤，因为所有东西几乎都是原生的，WEB.xml中要配置大量的东西；后来就用了Spring MVC到现在的Spring Boot。SpringBoot其实也是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb的好处，官方说明是简化开发，约定大于配置，能迅速的开发web应用 ，几行代码就可以开发一个http接口。</p><p>所有的技术框架的发展似乎都遵循了一条规律：从一个复杂应用场景衍生一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中使用功能和设计精华，重构出了一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡”约定大于配置”，进而衍生出一些一站式的解决方法。</p><p>这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</p><p>Spring的不断发展，涉及的领域越来越多，项目整合开发需要配置各种各样的文件，慢慢变得不是那么简单易用，违背了最初的设计理念，甚至可以说是配置地狱。Spring Boot正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用spring、更容易的集成各种各样的中间件、开源软件；</p><p>Spring Boot基于spring开发。Spring Boot本身并不提供Spring框架的核心特性以及扩展功能，只是用于快速、迅捷地开发新一代基于Spring框架的应用程序。Spring Boot以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数Spring Boot应用只需要很少的Spring配置。同时他集成了大量常用的第三方库配置(例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz等等)，Spring Boot应用中这些第三方库几乎可以零配置的开箱即用。</p><p>简单的说Spring Boot其实并不是新的框架，他默认配置了很多框架的使用方式，就像maven整合了所有的jar包，Spring Boot整合了所有的框架。</p><p><strong>Spring Boot的主要优点</strong></p><ul><li>为所有Spring开发者更快的入门</li><li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><blockquote><p>什么是微服务？</p></blockquote><p>微服务是一种架构风格，他要求我们在开发一个应用的时候，这个应用必须构成一系列小服务的组合；可以通过http的方式进行互通。</p><blockquote><p>单体应用框架</p></blockquote><p>所谓单体应用框架(all in one)是指，我们将一个应用中的所有应用服务都封装在一个应用中。</p><p>无论是ERP、CRM或是其他什么系统，你都把数据库访问，web访问，等等各个功能放到一个war包内。</p><ul><li>这样做的好处是，已于开发和测试；也十分方便部署；当需要扩展时，只需将war复制多份，然后放到多个服务器上，再做个负载均衡就可以了。</li><li>单体应用架构的缺点是，哪怕我要修改一个非常小的地方，我都需要停掉整个服务器，重新打包、部署这个应用war包。特别是对于一个大型应用，我们不可能把所有内容都放在一个应用里，我们如何维护、如何分工合作都是问题。</li></ul><blockquote><p>微服务架构</p></blockquote><p>all in one 的架构方式，我们把所有功能单元放在一个应用里面。然后吧整个应用部署到服务器上。如果负载能力不行，我们将正二哥应用进行水平复制，进行扩展，然后再负载均衡。</p><p>所谓微服务架构，就是打破之前all in one 的架构方式，把每个功能元素独立出来。把独立出来的功能元素的动态组合，需要的功能元素才去拿来组合，需要多一些时可以整合多个功能元素。所以微服务架构是对功能元素进行复制，而没有对整个应用进行复制。</p><p>这样做的好处是：</p><ol><li>节省了调度资源</li><li>每个共呢个元素服务都是一个可替换的、可独立升级的软件代码。</li></ol><blockquote><p>如何构建微服务</p></blockquote><p>一个大型系统的微服务架构，就像一个复杂交织的神经网络，每一个神经元就是一个功能元素，他们各自完成自己的功能，然后通过http相互请求调用。比如一个电商系统，查缓存、连数据库、浏览页面、结账、支付等服务都是一个个独立的功能服务，都为微化了，他们作为一个个微服务共同构建了一个庞大的系统。如果修改其中的一个功能，只需要更新升级其中一个功能服务单元即可。</p><p>Spring为我们带来了构建大型分布式微服务的全套、全程产品：</p><ul><li>构建一个个功能独立的微服务应用的那元，可以使用spring boot，可以帮我们快速构建一个应用；</li><li>大型分布式网络服务的调用，这部分由spring cloud来完成，实现分布式；</li><li>在分布式中间，进行流式数据计算、批处理，我们有spring cloud data flow。</li><li>spring 为我们想清楚了整个从开始构建应用到大型分布式应用全流程方案。</li></ul><blockquote><p>微服务论文</p></blockquote><p>原文(Martin Fowler)：</p><p><a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p><p>翻译(船长&amp;CAP)：</p><p><a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 什么是spring&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spring是一个开源框架，2003年兴起的一个轻量级Java开发框架，作者: Rod Johnson。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring是为了解决企业级应用开发的复杂性而创</summary>
      
    
    
    
    
    <category term="Java" scheme="http://myfake.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>外键</title>
    <link href="http://myfake.xyz/posts/68b78662.html"/>
    <id>http://myfake.xyz/posts/68b78662.html</id>
    <published>2022-09-11T12:49:41.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外键（了解即可）"><a href="#外键（了解即可）" class="headerlink" title="外键（了解即可）"></a>外键（了解即可）</h2><blockquote><p>方式1、在创建表的时候，增加约束(麻烦，比较复杂)</p></blockquote><p>创建一个年级表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade`(</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><p>创建一个学生表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 学生表的 gradeid 字段 要去引用年级表的gradeid</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束(执行引用) references 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>(<span class="string">&#x27;匿名&#x27;</span>) COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>(<span class="string">&#x27;123456&#x27;</span>) COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>(<span class="string">&#x27;女&#x27;</span>) COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生的年级&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`),</span><br><span class="line">KEY `FK_gradeid` (`gradeid`),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade` (`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><p><img src="/posts%5C68b78662%5C%E5%A4%96%E9%94%AE.png" alt="外键"></p><p>删除有外键关系的表的时候，必须要先删除引用别人的表(从表),再删除被引用的表(主表)</p><blockquote><p>方式2、创建表成功后添加外键约束</p></blockquote><p>创建student表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>(<span class="string">&#x27;匿名&#x27;</span>) COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>(<span class="string">&#x27;123456&#x27;</span>) COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span>(<span class="string">&#x27;女&#x27;</span>) COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生的年级&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><p>添加外键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表的时候没有外键关系</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade` (`gradeid`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表 ADD CONSISTENT 约束名 FOREIGN KEY (作为外键的列) REFERENCES 那个表 (那个字段)</span></span><br></pre></td></tr></table></figure><p><img src="/posts%5C68b78662%5C%E5%A4%96%E9%94%AE.png" alt="外键"></p><p>以上的操作都是物理外键，数据库级别的外键，不建议使用。(避免数据库过多造成困扰)</p><p>&#x3D;&#x3D;最佳实践&#x3D;&#x3D;</p><ul><li>数据库就是单纯的表，只用来存数据，只有行(数据)和列(字段)</li><li>我们想使用多张表的数据，想使用外键(程序去实践)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;外键（了解即可）&quot;&gt;&lt;a href=&quot;#外键（了解即可）&quot; class=&quot;headerlink&quot; title=&quot;外键（了解即可）&quot;&gt;&lt;/a&gt;外键（了解即可）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;方式1、在创建表的时候，增加约束(麻烦，比较复杂)&lt;/p&gt;
&lt;/b</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://myfake.xyz/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>数据表的类型</title>
    <link href="http://myfake.xyz/posts/a9d62b65.html"/>
    <id>http://myfake.xyz/posts/a9d62b65.html</id>
    <published>2022-09-10T15:21:06.000Z</published>
    <updated>2022-09-17T05:31:50.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySql中INNODB和MYISAM引擎的区别"><a href="#MySql中INNODB和MYISAM引擎的区别" class="headerlink" title="MySql中INNODB和MYISAM引擎的区别"></a>MySql中INNODB和MYISAM引擎的区别</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关于数据库引擎</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">INNODB 默认使用</span></span><br><span class="line"><span class="comment">MYISAM 早些年使用的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th align="left">MYISAM</th><th align="left">INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td align="left">不支持</td><td align="left">支持</td></tr><tr><td>数据行锁定</td><td align="left">不支持 (表锁)</td><td align="left">支持</td></tr><tr><td>外键约束</td><td align="left">不持支</td><td align="left">支持</td></tr><tr><td>全文索引</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td>表空间的大小</td><td align="left">较小</td><td align="left">较大，约为MYISAM的两倍</td></tr></tbody></table><p>常规的使用操作:</p><ul><li>MYISAM 节约空间，速度较快</li><li>INNODB 安全性高，支持事务的处理，多表多用户操作</li></ul><blockquote><p>在物理空间存在的位置</p></blockquote><p>所有的数据库文件都存在data目录下，一个文件夹对应一个数据库</p><p>本质还是文件的存储！</p><p>MySql引擎在物理文件上的区别</p><ul><li>INNODB 在数据库表中只有一个*.frm文件，以及上级目录下的ibdata文件</li><li>MYISAM 对应文件<ul><li>*.frm -表结构的定义文件</li><li>*.myd 数据文件(data)</li><li>*.MYI 索引文件(index)</li></ul></li></ul><blockquote><p>设置数据库表的字符编码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><p>不设置的话，会是，mysql默认的字符集编码（不支持中文）</p><p>MySql默认编码是Latin1,不支持中文</p><p>在my.ini中配置默认的编码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">character</span><span class="operator">-</span><span class="keyword">set</span><span class="operator">-</span>server<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MySql中INNODB和MYISAM引擎的区别&quot;&gt;&lt;a href=&quot;#MySql中INNODB和MYISAM引擎的区别&quot; class=&quot;headerlink&quot; title=&quot;MySql中INNODB和MYISAM引擎的区别&quot;&gt;&lt;/a&gt;MySql中INNODB和M</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://myfake.xyz/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>javase复习</title>
    <link href="http://myfake.xyz/posts/f2d38d13.html"/>
    <id>http://myfake.xyz/posts/f2d38d13.html</id>
    <published>2022-09-09T21:41:28.000Z</published>
    <updated>2022-09-17T05:31:50.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笔试题-50分"><a href="#笔试题-50分" class="headerlink" title="笔试题(50分)"></a>笔试题(50分)</h2><p>1.用一个生活案例，描述出面向对象这个概念！(理解)</p><psw>（比如设计一个角色）创建了一个角色名为教师，教师的性别，年龄，资历，他的技能是传授经验。后来我又创建了一个角色名为学生，学生的性别，年龄，资历。</psw><p>2.native,volatile关键字的作用！各举一个java中的例子!</p><psw>native指的是底层java不能读取的代码，里面大概率是c语言编写的。Volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回新写入的值，volatile有两个重要的作用，首先是保证变量的可见性，当一个线程修改了变量的值那么新的值对于其他线程是可以立即可见的，其次是禁止指令重排序，volatile是比Synchronized更轻量级的同步锁，在访问volatile变量时不会执行加锁操作，因此也就不会执行线程阻塞。volatile适合使用在一个变量被多个线程共享县城直接给这个变量赋值的场景。</psw><p>3.写出结果，分析原因，代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchTest</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">switch</span>(param)&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&quot;null&quot;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;null&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行的结果是什么？为什么会出现这种情况？</p><psw>会报空指针异常,报错的内容里面有hashCode字样，显然原因是需要比较hashCode是否相等，而一方为null;就产生了空指针异常，null是无法获取其hashCode的</psw><p>4.线程的五种状态，以及线程常用的方法</p><psw>1.新建状态 2.就绪状态 3.运行状态 4.阻塞状态 5.死亡状态 常用的方法有：sleep，join，yield，isLive,start,setPriority,interrupt(),stop(不建议使用)</psw><p>5.通过反射如何创建对象，执行对象的方法，修改对象的字段，如果是私有属性该怎么办？</p><psw>首先要获得class对象，可以使用Class.forName()来获取对象，然后通过获取到的对象使用newInstance()方法创建对象，或者使用构造器，方法可以使用getMethod来获取，若是属性为private可以使用setAccessible(true)来关闭安全检测。</psw><h2 id="代码题：多线程聊天室（50分）"><a href="#代码题：多线程聊天室（50分）" class="headerlink" title="代码题：多线程聊天室（50分）"></a>代码题：多线程聊天室（50分）</h2><p>1.GUI+10</p><p>2.多线程+20</p><p>3.集合+10</p><p>4.可阅读性+5</p><p>5.网络编程+5</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;笔试题-50分&quot;&gt;&lt;a href=&quot;#笔试题-50分&quot; class=&quot;headerlink&quot; title=&quot;笔试题(50分)&quot;&gt;&lt;/a&gt;笔试题(50分)&lt;/h2&gt;&lt;p&gt;1.用一个生活案例，描述出面向对象这个概念！(理解)&lt;/p&gt;
&lt;psw&gt;（比如设计一个角色）创建</summary>
      
    
    
    
    
    <category term="JavaSE" scheme="http://myfake.xyz/tags/JavaSE/"/>
    
  </entry>
  
</feed>
